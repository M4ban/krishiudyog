{
  "version": 3,
  "sections": [
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/src/lib/mongodb.ts"],"sourcesContent":["import mongoose from 'mongoose';\r\n\r\n// Define the type for the cached mongoose connection\r\ninterface MongooseCache {\r\n  conn: typeof mongoose | null;\r\n  promise: Promise<typeof mongoose> | null;\r\n}\r\n\r\n// Declare global namespace to extend NodeJS.Global\r\ndeclare global {\r\n  var mongoose: MongooseCache | undefined;\r\n}\r\n\r\nif (!process.env.MONGODB_URI) {\r\n  throw new Error('Please define the MONGODB_URI environment variable inside .env.local');\r\n}\r\n\r\nconst MONGODB_URI = process.env.MONGODB_URI;\r\n\r\n// Initialize the cached connection\r\nconst cached: MongooseCache = global.mongoose || { conn: null, promise: null };\r\n\r\n// Set the global mongoose cache\r\nif (!global.mongoose) {\r\n  global.mongoose = cached;\r\n}\r\n\r\nasync function connectDB() {\r\n  if (cached.conn) {\r\n    return cached.conn;\r\n  }\r\n\r\n  if (!cached.promise) {\r\n    const opts = {\r\n      bufferCommands: false,\r\n    };\r\n\r\n    cached.promise = mongoose.connect(MONGODB_URI!, opts).then((mongoose) => {\r\n      return mongoose;\r\n    });\r\n  }\r\n\r\n  try {\r\n    cached.conn = await cached.promise;\r\n  } catch (e) {\r\n    cached.promise = null;\r\n    throw e;\r\n  }\r\n\r\n  return cached.conn;\r\n}\r\n\r\nexport default connectDB; "],"names":[],"mappings":";;;;;;;AAaA,IAAI,CAAC,4KAAQ,GAAG,CAAC,WAAW,EAAE;IAC5B,MAAM,IAAI,MAAM;AAClB;AAEA,MAAM,cAAc,4KAAQ,GAAG,CAAC,WAAW;AAE3C,mCAAmC;AACnC,MAAM,SAAwB,OAAO,QAAQ,IAAI;IAAE,MAAM;IAAM,SAAS;AAAK;AAE7E,gCAAgC;AAChC,IAAI,CAAC,OAAO,QAAQ,EAAE;IACpB,OAAO,QAAQ,GAAG;AACpB;AAEA,eAAe;IACb,IAAI,OAAO,IAAI,EAAE;QACf,OAAO,OAAO,IAAI;IACpB;IAEA,IAAI,CAAC,OAAO,OAAO,EAAE;QACnB,MAAM,OAAO;YACX,gBAAgB;QAClB;QAEA,OAAO,OAAO,GAAG,iKAAS,OAAO,CAAC,aAAc,MAAM,IAAI,CAAC,CAAC;YAC1D,OAAO;QACT;IACF;IAEA,IAAI;QACF,OAAO,IAAI,GAAG,MAAM,OAAO,OAAO;IACpC,EAAE,OAAO,GAAG;QACV,OAAO,OAAO,GAAG;QACjB,MAAM;IACR;IAEA,OAAO,OAAO,IAAI;AACpB;uCAEe"}},
    {"offset": {"line": 46, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 51, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/src/models/Product.ts"],"sourcesContent":["import mongoose from 'mongoose';\r\n\r\nexport interface IProduct extends mongoose.Document {\r\n  name: string;\r\n  description: string;\r\n  price: number;\r\n  image: string;\r\n  category: string;\r\n  stock: number;\r\n  createdAt: Date;\r\n  updatedAt: Date;\r\n}\r\n\r\nconst productSchema = new mongoose.Schema({\r\n  name: {\r\n    type: String,\r\n    required: [true, 'Please provide a product name'],\r\n  },\r\n  description: {\r\n    type: String,\r\n    required: [true, 'Please provide a product description'],\r\n  },\r\n  price: {\r\n    type: Number,\r\n    required: [true, 'Please provide a product price'],\r\n    min: [0, 'Price cannot be negative'],\r\n  },\r\n  image: {\r\n    type: String,\r\n    required: [true, 'Please provide a product image'],\r\n  },\r\n  category: {\r\n    type: String,\r\n    required: [true, 'Please provide a product category'],\r\n  },\r\n  stock: {\r\n    type: Number,\r\n    required: [true, 'Please provide stock quantity'],\r\n    min: [0, 'Stock cannot be negative'],\r\n  },\r\n  createdAt: {\r\n    type: Date,\r\n    default: Date.now,\r\n  },\r\n  updatedAt: {\r\n    type: Date,\r\n    default: Date.now,\r\n  },\r\n});\r\n\r\n// Update the updatedAt timestamp before saving\r\nproductSchema.pre('save', function(next) {\r\n  this.updatedAt = new Date();\r\n  next();\r\n});\r\n\r\nexport default mongoose.models.Product || mongoose.model<IProduct>('Product', productSchema); "],"names":[],"mappings":";;;;;;AAaA,MAAM,gBAAgB,IAAI,iKAAS,MAAM,CAAC;IACxC,MAAM;QACJ,MAAM;QACN,UAAU;YAAC;YAAM;SAAgC;IACnD;IACA,aAAa;QACX,MAAM;QACN,UAAU;YAAC;YAAM;SAAuC;IAC1D;IACA,OAAO;QACL,MAAM;QACN,UAAU;YAAC;YAAM;SAAiC;QAClD,KAAK;YAAC;YAAG;SAA2B;IACtC;IACA,OAAO;QACL,MAAM;QACN,UAAU;YAAC;YAAM;SAAiC;IACpD;IACA,UAAU;QACR,MAAM;QACN,UAAU;YAAC;YAAM;SAAoC;IACvD;IACA,OAAO;QACL,MAAM;QACN,UAAU;YAAC;YAAM;SAAgC;QACjD,KAAK;YAAC;YAAG;SAA2B;IACtC;IACA,WAAW;QACT,MAAM;QACN,SAAS,KAAK,GAAG;IACnB;IACA,WAAW;QACT,MAAM;QACN,SAAS,KAAK,GAAG;IACnB;AACF;AAEA,+CAA+C;AAC/C,cAAc,GAAG,CAAC,QAAQ,SAAS,IAAI;IACrC,IAAI,CAAC,SAAS,GAAG,IAAI;IACrB;AACF;uCAEe,iKAAS,MAAM,CAAC,OAAO,IAAI,iKAAS,KAAK,CAAW,WAAW"}},
    {"offset": {"line": 123, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 128, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/src/app/products/page.tsx"],"sourcesContent":["import { Metadata } from 'next';\r\nimport connectDB from '@/lib/mongodb';\r\nimport Product from '@/models/Product';\r\nimport ProductsClient from './products-client';\r\n\r\nexport const metadata: Metadata = {\r\n  title: 'Products | KrishiUdyog',\r\n  description: 'Browse our selection of high-quality agricultural products directly from farmers',\r\n};\r\n\r\n// Function to fetch products from the database\r\nasync function getProducts() {\r\n  try {\r\n    await connectDB();\r\n    const products = await Product.find({}).sort({ createdAt: -1 }).lean();\r\n    return JSON.parse(JSON.stringify(products));\r\n  } catch (error) {\r\n    console.error('Error fetching products:', error);\r\n    return [];\r\n  }\r\n}\r\n\r\nexport default async function ProductsPage() {\r\n  const products = await getProducts();\r\n  \r\n  return <ProductsClient products={products} />;\r\n} "],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAKO,MAAM,WAAqB;IAChC,OAAO;IACP,aAAa;AACf;AAEA,+CAA+C;AAC/C,eAAe;IACb,IAAI;QACF,MAAM;QACN,MAAM,WAAW,MAAM,uIAAQ,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC;YAAE,WAAW,CAAC;QAAE,GAAG,IAAI;QACpE,OAAO,KAAK,KAAK,CAAC,KAAK,SAAS,CAAC;IACnC,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,4BAA4B;QAC1C,OAAO,EAAE;IACX;AACF;AAEe,eAAe;IAC5B,MAAM,WAAW,MAAM;IAEvB,qBAAO,wLAAC;QAAe,UAAU;;;;;;AACnC;KAJ8B"}},
    {"offset": {"line": 175, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}