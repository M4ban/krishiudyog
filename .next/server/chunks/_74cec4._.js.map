{
  "version": 3,
  "sections": [
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/src/lib/mongodb.ts"],"sourcesContent":["import mongoose from 'mongoose';\r\n\r\n// Define the type for the cached mongoose connection\r\ninterface MongooseCache {\r\n  conn: typeof mongoose | null;\r\n  promise: Promise<typeof mongoose> | null;\r\n}\r\n\r\n// Declare global namespace to extend NodeJS.Global\r\ndeclare global {\r\n  var mongoose: MongooseCache | undefined;\r\n}\r\n\r\nif (!process.env.MONGODB_URI) {\r\n  throw new Error('Please define the MONGODB_URI environment variable inside .env.local');\r\n}\r\n\r\nconst MONGODB_URI = process.env.MONGODB_URI;\r\n\r\n// Initialize the cached connection\r\nconst cached: MongooseCache = global.mongoose || { conn: null, promise: null };\r\n\r\n// Set the global mongoose cache\r\nif (!global.mongoose) {\r\n  global.mongoose = cached;\r\n}\r\n\r\nasync function connectDB() {\r\n  if (cached.conn) {\r\n    return cached.conn;\r\n  }\r\n\r\n  if (!cached.promise) {\r\n    const opts = {\r\n      bufferCommands: false,\r\n    };\r\n\r\n    cached.promise = mongoose.connect(MONGODB_URI!, opts).then((mongoose) => {\r\n      return mongoose;\r\n    });\r\n  }\r\n\r\n  try {\r\n    cached.conn = await cached.promise;\r\n  } catch (e) {\r\n    cached.promise = null;\r\n    throw e;\r\n  }\r\n\r\n  return cached.conn;\r\n}\r\n\r\nexport default connectDB; "],"names":[],"mappings":";;;;;;AAaA,IAAI,CAAC,QAAQ,GAAG,CAAC,WAAW,EAAE;IAC5B,MAAM,IAAI,MAAM;AAClB;AAEA,MAAM,cAAc,QAAQ,GAAG,CAAC,WAAW;AAE3C,mCAAmC;AACnC,MAAM,SAAwB,OAAO,QAAQ,IAAI;IAAE,MAAM;IAAM,SAAS;AAAK;AAE7E,gCAAgC;AAChC,IAAI,CAAC,OAAO,QAAQ,EAAE;IACpB,OAAO,QAAQ,GAAG;AACpB;AAEA,eAAe;IACb,IAAI,OAAO,IAAI,EAAE;QACf,OAAO,OAAO,IAAI;IACpB;IAEA,IAAI,CAAC,OAAO,OAAO,EAAE;QACnB,MAAM,OAAO;YACX,gBAAgB;QAClB;QAEA,OAAO,OAAO,GAAG,6CAAS,OAAO,CAAC,aAAc,MAAM,IAAI,CAAC,CAAC;YAC1D,OAAO;QACT;IACF;IAEA,IAAI;QACF,OAAO,IAAI,GAAG,MAAM,OAAO,OAAO;IACpC,EAAE,OAAO,GAAG;QACV,OAAO,OAAO,GAAG;QACjB,MAAM;IACR;IAEA,OAAO,OAAO,IAAI;AACpB;uCAEe"}},
    {"offset": {"line": 45, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 50, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/src/models/Product.ts"],"sourcesContent":["import mongoose from 'mongoose';\r\n\r\nexport interface IProduct extends mongoose.Document {\r\n  name: string;\r\n  description: string;\r\n  price: number;\r\n  image: string;\r\n  category: string;\r\n  stock: number;\r\n  createdAt: Date;\r\n  updatedAt: Date;\r\n}\r\n\r\nconst productSchema = new mongoose.Schema({\r\n  name: {\r\n    type: String,\r\n    required: [true, 'Please provide a product name'],\r\n  },\r\n  description: {\r\n    type: String,\r\n    required: [true, 'Please provide a product description'],\r\n  },\r\n  price: {\r\n    type: Number,\r\n    required: [true, 'Please provide a product price'],\r\n    min: [0, 'Price cannot be negative'],\r\n  },\r\n  image: {\r\n    type: String,\r\n    required: [true, 'Please provide a product image'],\r\n  },\r\n  category: {\r\n    type: String,\r\n    required: [true, 'Please provide a product category'],\r\n  },\r\n  stock: {\r\n    type: Number,\r\n    required: [true, 'Please provide stock quantity'],\r\n    min: [0, 'Stock cannot be negative'],\r\n  },\r\n  createdAt: {\r\n    type: Date,\r\n    default: Date.now,\r\n  },\r\n  updatedAt: {\r\n    type: Date,\r\n    default: Date.now,\r\n  },\r\n});\r\n\r\n// Update the updatedAt timestamp before saving\r\nproductSchema.pre('save', function(next) {\r\n  this.updatedAt = new Date();\r\n  next();\r\n});\r\n\r\nexport default mongoose.models.Product || mongoose.model<IProduct>('Product', productSchema); "],"names":[],"mappings":";;;;;;AAaA,MAAM,gBAAgB,IAAI,6CAAS,MAAM,CAAC;IACxC,MAAM;QACJ,MAAM;QACN,UAAU;YAAC;YAAM;SAAgC;IACnD;IACA,aAAa;QACX,MAAM;QACN,UAAU;YAAC;YAAM;SAAuC;IAC1D;IACA,OAAO;QACL,MAAM;QACN,UAAU;YAAC;YAAM;SAAiC;QAClD,KAAK;YAAC;YAAG;SAA2B;IACtC;IACA,OAAO;QACL,MAAM;QACN,UAAU;YAAC;YAAM;SAAiC;IACpD;IACA,UAAU;QACR,MAAM;QACN,UAAU;YAAC;YAAM;SAAoC;IACvD;IACA,OAAO;QACL,MAAM;QACN,UAAU;YAAC;YAAM;SAAgC;QACjD,KAAK;YAAC;YAAG;SAA2B;IACtC;IACA,WAAW;QACT,MAAM;QACN,SAAS,KAAK,GAAG;IACnB;IACA,WAAW;QACT,MAAM;QACN,SAAS,KAAK,GAAG;IACnB;AACF;AAEA,+CAA+C;AAC/C,cAAc,GAAG,CAAC,QAAQ,SAAS,IAAI;IACrC,IAAI,CAAC,SAAS,GAAG,IAAI;IACrB;AACF;uCAEe,6CAAS,MAAM,CAAC,OAAO,IAAI,6CAAS,KAAK,CAAW,WAAW"}},
    {"offset": {"line": 122, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 127, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/src/app/api/seed/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\r\nimport connectDB from '@/lib/mongodb';\r\nimport Product from '@/models/Product';\r\n\r\n// Sample products data\r\nconst products = [\r\n  {\r\n    name: 'Organic Wheat',\r\n    description: 'High-quality organic wheat grown without pesticides. Perfect for making chapatis, bread, and other wheat-based products.',\r\n    price: 29.99,\r\n    image: '/images/Organic Wheat.jpg',\r\n    category: 'grains',\r\n    stock: 50\r\n  },\r\n  {\r\n    name: 'Fresh Tomatoes',\r\n    description: 'Ripe, juicy tomatoes grown in our greenhouse. Rich in lycopene and perfect for salads, curries, and sauces.',\r\n    price: 4.99,\r\n    image: '/images/Fresh Tomatos.jpg',\r\n    category: 'vegetables',\r\n    stock: 100\r\n  },\r\n  {\r\n    name: 'Premium Coffee Beans',\r\n    description: 'Arabica coffee beans from sustainable farms in the hills of South India. Medium roast with notes of chocolate and caramel.',\r\n    price: 19.99,\r\n    image: '/images/Premium Coffee Beans.jpg',\r\n    category: 'beverages',\r\n    stock: 30\r\n  },\r\n  {\r\n    name: 'Organic Honey',\r\n    description: 'Pure, natural honey collected from beehives located in pristine forests. No additives or preservatives.',\r\n    price: 12.99,\r\n    image: '/images/Organic Honey.jpg',\r\n    category: 'condiments',\r\n    stock: 25\r\n  },\r\n  {\r\n    name: 'Fresh Apples',\r\n    description: 'Crisp, sweet apples from Himalayan orchards. Rich in fiber and antioxidants.',\r\n    price: 3.99,\r\n    image: '/images/Fresh Apples.jpg',\r\n    category: 'fruits',\r\n    stock: 75\r\n  },\r\n  {\r\n    name: 'Basmati Rice',\r\n    description: 'Premium long-grain basmati rice with a delightful aroma. Perfect for biryanis and pulao.',\r\n    price: 15.99,\r\n    image: '/images/Basmati Rice.jpg',\r\n    category: 'grains',\r\n    stock: 60\r\n  },\r\n  {\r\n    name: 'Fresh Spinach',\r\n    description: 'Nutrient-rich spinach leaves, freshly harvested from our farms. High in iron and vitamins.',\r\n    price: 2.49,\r\n    image: '/images/Fresh Spinach.jpg',\r\n    category: 'vegetables',\r\n    stock: 80\r\n  },\r\n  {\r\n    name: 'Organic Turmeric Powder',\r\n    description: 'Organically grown turmeric, ground into fine powder. Known for its anti-inflammatory properties.',\r\n    price: 5.99,\r\n    image: '/images/Organic Turmeric Powder.jpg',\r\n    category: 'spices',\r\n    stock: 40\r\n  },\r\n  {\r\n    name: 'Fresh Oranges',\r\n    description: 'Juicy, sweet oranges rich in Vitamin C. Perfect for juicing or eating fresh.',\r\n    price: 4.49,\r\n    image: '/images/Fresh Oranges.jpg',\r\n    category: 'fruits',\r\n    stock: 65\r\n  },\r\n  {\r\n    name: 'Organic Milk',\r\n    description: 'Fresh, organic milk from grass-fed cows. No hormones or antibiotics.',\r\n    price: 3.29,\r\n    image: '/images/Organic Milk.jpg',\r\n    category: 'dairy',\r\n    stock: 30\r\n  }\r\n];\r\n\r\nexport async function GET() {\r\n  try {\r\n    await connectDB();\r\n    \r\n    // Clear existing products\r\n    await Product.deleteMany({});\r\n    \r\n    // Insert new products\r\n    await Product.insertMany(products);\r\n    \r\n    return NextResponse.json({ \r\n      success: true, \r\n      message: 'Database seeded successfully with 10 products',\r\n      count: products.length\r\n    });\r\n  } catch (error: any) {\r\n    console.error('Error seeding database:', error);\r\n    return NextResponse.json({ \r\n      success: false, \r\n      error: error.message || 'Failed to seed database' \r\n    }, { status: 500 });\r\n  }\r\n} "],"names":[],"mappings":";;;;;;;;;;AAIA,uBAAuB;AACvB,MAAM,WAAW;IACf;QACE,MAAM;QACN,aAAa;QACb,OAAO;QACP,OAAO;QACP,UAAU;QACV,OAAO;IACT;IACA;QACE,MAAM;QACN,aAAa;QACb,OAAO;QACP,OAAO;QACP,UAAU;QACV,OAAO;IACT;IACA;QACE,MAAM;QACN,aAAa;QACb,OAAO;QACP,OAAO;QACP,UAAU;QACV,OAAO;IACT;IACA;QACE,MAAM;QACN,aAAa;QACb,OAAO;QACP,OAAO;QACP,UAAU;QACV,OAAO;IACT;IACA;QACE,MAAM;QACN,aAAa;QACb,OAAO;QACP,OAAO;QACP,UAAU;QACV,OAAO;IACT;IACA;QACE,MAAM;QACN,aAAa;QACb,OAAO;QACP,OAAO;QACP,UAAU;QACV,OAAO;IACT;IACA;QACE,MAAM;QACN,aAAa;QACb,OAAO;QACP,OAAO;QACP,UAAU;QACV,OAAO;IACT;IACA;QACE,MAAM;QACN,aAAa;QACb,OAAO;QACP,OAAO;QACP,UAAU;QACV,OAAO;IACT;IACA;QACE,MAAM;QACN,aAAa;QACb,OAAO;QACP,OAAO;QACP,UAAU;QACV,OAAO;IACT;IACA;QACE,MAAM;QACN,aAAa;QACb,OAAO;QACP,OAAO;QACP,UAAU;QACV,OAAO;IACT;CACD;AAEM,eAAe;IACpB,IAAI;QACF,MAAM;QAEN,0BAA0B;QAC1B,MAAM,oIAAQ,UAAU,CAAC,CAAC;QAE1B,sBAAsB;QACtB,MAAM,oIAAQ,UAAU,CAAC;QAEzB,OAAO,wLAAa,IAAI,CAAC;YACvB,SAAS;YACT,SAAS;YACT,OAAO,SAAS,MAAM;QACxB;IACF,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC,2BAA2B;QACzC,OAAO,wLAAa,IAAI,CAAC;YACvB,SAAS;YACT,OAAO,MAAM,OAAO,IAAI;QAC1B,GAAG;YAAE,QAAQ;QAAI;IACnB;AACF"}},
    {"offset": {"line": 242, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 246, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/.next-internal/server/app/api/seed/route/actions.js"],"sourcesContent":["__turbopack_export_value__({\n});"],"names":[],"mappings":"AAAA,2BAA2B,CAC3B"}},
    {"offset": {"line": 247, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}