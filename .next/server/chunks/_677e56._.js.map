{
  "version": 3,
  "sections": [
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/src/lib/mongodb.ts"],"sourcesContent":["import mongoose from 'mongoose';\r\n\r\n// Define the type for the cached mongoose connection\r\ninterface MongooseCache {\r\n  conn: typeof mongoose | null;\r\n  promise: Promise<typeof mongoose> | null;\r\n}\r\n\r\n// Declare global namespace to extend NodeJS.Global\r\ndeclare global {\r\n  var mongoose: MongooseCache | undefined;\r\n}\r\n\r\nif (!process.env.MONGODB_URI) {\r\n  throw new Error('Please define the MONGODB_URI environment variable inside .env.local');\r\n}\r\n\r\nconst MONGODB_URI = process.env.MONGODB_URI;\r\n\r\n// Initialize the cached connection\r\nconst cached: MongooseCache = global.mongoose || { conn: null, promise: null };\r\n\r\n// Set the global mongoose cache\r\nif (!global.mongoose) {\r\n  global.mongoose = cached;\r\n}\r\n\r\nasync function connectDB() {\r\n  if (cached.conn) {\r\n    return cached.conn;\r\n  }\r\n\r\n  if (!cached.promise) {\r\n    const opts = {\r\n      bufferCommands: false,\r\n    };\r\n\r\n    cached.promise = mongoose.connect(MONGODB_URI!, opts).then((mongoose) => {\r\n      return mongoose;\r\n    });\r\n  }\r\n\r\n  try {\r\n    cached.conn = await cached.promise;\r\n  } catch (e) {\r\n    cached.promise = null;\r\n    throw e;\r\n  }\r\n\r\n  return cached.conn;\r\n}\r\n\r\nexport default connectDB; "],"names":[],"mappings":";;;;;;AAaA,IAAI,CAAC,QAAQ,GAAG,CAAC,WAAW,EAAE;IAC5B,MAAM,IAAI,MAAM;AAClB;AAEA,MAAM,cAAc,QAAQ,GAAG,CAAC,WAAW;AAE3C,mCAAmC;AACnC,MAAM,SAAwB,OAAO,QAAQ,IAAI;IAAE,MAAM;IAAM,SAAS;AAAK;AAE7E,gCAAgC;AAChC,IAAI,CAAC,OAAO,QAAQ,EAAE;IACpB,OAAO,QAAQ,GAAG;AACpB;AAEA,eAAe;IACb,IAAI,OAAO,IAAI,EAAE;QACf,OAAO,OAAO,IAAI;IACpB;IAEA,IAAI,CAAC,OAAO,OAAO,EAAE;QACnB,MAAM,OAAO;YACX,gBAAgB;QAClB;QAEA,OAAO,OAAO,GAAG,6CAAS,OAAO,CAAC,aAAc,MAAM,IAAI,CAAC,CAAC;YAC1D,OAAO;QACT;IACF;IAEA,IAAI;QACF,OAAO,IAAI,GAAG,MAAM,OAAO,OAAO;IACpC,EAAE,OAAO,GAAG;QACV,OAAO,OAAO,GAAG;QACjB,MAAM;IACR;IAEA,OAAO,OAAO,IAAI;AACpB;uCAEe"}},
    {"offset": {"line": 45, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 50, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/src/models/User.ts"],"sourcesContent":["import mongoose from 'mongoose';\r\nimport bcrypt from 'bcryptjs';\r\n\r\nexport interface IUser extends mongoose.Document {\r\n  name: string;\r\n  email: string;\r\n  password: string;\r\n  role: 'user' | 'admin';\r\n  createdAt: Date;\r\n  comparePassword(candidatePassword: string): Promise<boolean>;\r\n}\r\n\r\nconst userSchema = new mongoose.Schema({\r\n  name: {\r\n    type: String,\r\n    required: [true, 'Please provide a name'],\r\n  },\r\n  email: {\r\n    type: String,\r\n    required: [true, 'Please provide an email'],\r\n    unique: true,\r\n    lowercase: true,\r\n  },\r\n  password: {\r\n    type: String,\r\n    required: [true, 'Please provide a password'],\r\n    minlength: 6,\r\n  },\r\n  role: {\r\n    type: String,\r\n    enum: ['user', 'admin'],\r\n    default: 'user',\r\n  },\r\n  createdAt: {\r\n    type: Date,\r\n    default: Date.now,\r\n  },\r\n});\r\n\r\n// Hash password before saving\r\nuserSchema.pre('save', async function(next) {\r\n  if (!this.isModified('password')) return next();\r\n  \r\n  try {\r\n    const salt = await bcrypt.genSalt(10);\r\n    this.password = await bcrypt.hash(this.password, salt);\r\n    next();\r\n  } catch (error: any) {\r\n    next(error);\r\n  }\r\n});\r\n\r\n// Method to compare password\r\nuserSchema.methods.comparePassword = async function(candidatePassword: string): Promise<boolean> {\r\n  try {\r\n    return await bcrypt.compare(candidatePassword, this.password);\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport default mongoose.models.User || mongoose.model<IUser>('User', userSchema); "],"names":[],"mappings":";;;;;;;;AAYA,MAAM,aAAa,IAAI,6CAAS,MAAM,CAAC;IACrC,MAAM;QACJ,MAAM;QACN,UAAU;YAAC;YAAM;SAAwB;IAC3C;IACA,OAAO;QACL,MAAM;QACN,UAAU;YAAC;YAAM;SAA0B;QAC3C,QAAQ;QACR,WAAW;IACb;IACA,UAAU;QACR,MAAM;QACN,UAAU;YAAC;YAAM;SAA4B;QAC7C,WAAW;IACb;IACA,MAAM;QACJ,MAAM;QACN,MAAM;YAAC;YAAQ;SAAQ;QACvB,SAAS;IACX;IACA,WAAW;QACT,MAAM;QACN,SAAS,KAAK,GAAG;IACnB;AACF;AAEA,8BAA8B;AAC9B,WAAW,GAAG,CAAC,QAAQ,eAAe,IAAI;IACxC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,aAAa,OAAO;IAEzC,IAAI;QACF,MAAM,OAAO,MAAM,6IAAO,OAAO,CAAC;QAClC,IAAI,CAAC,QAAQ,GAAG,MAAM,6IAAO,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;QACjD;IACF,EAAE,OAAO,OAAY;QACnB,KAAK;IACP;AACF;AAEA,6BAA6B;AAC7B,WAAW,OAAO,CAAC,eAAe,GAAG,eAAe,iBAAyB;IAC3E,IAAI;QACF,OAAO,MAAM,6IAAO,OAAO,CAAC,mBAAmB,IAAI,CAAC,QAAQ;IAC9D,EAAE,OAAO,OAAO;QACd,MAAM;IACR;AACF;uCAEe,6CAAS,MAAM,CAAC,IAAI,IAAI,6CAAS,KAAK,CAAQ,QAAQ"}},
    {"offset": {"line": 116, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 121, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/src/app/api/auth/[...nextauth]/route.ts"],"sourcesContent":["import NextAuth from 'next-auth';\r\nimport CredentialsProvider from 'next-auth/providers/credentials';\r\nimport connectDB from '@/lib/mongodb';\r\nimport User from '@/models/User';\r\nimport { NextAuthOptions } from 'next-auth';\r\n\r\nexport const authOptions: NextAuthOptions = {\r\n  providers: [\r\n    CredentialsProvider({\r\n      name: 'Credentials',\r\n      credentials: {\r\n        email: { label: \"Email\", type: \"email\" },\r\n        password: { label: \"Password\", type: \"password\" }\r\n      },\r\n      async authorize(credentials) {\r\n        if (!credentials?.email || !credentials?.password) {\r\n          throw new Error('Please provide email and password');\r\n        }\r\n\r\n        await connectDB();\r\n        const user = await User.findOne({ email: credentials.email });\r\n\r\n        if (!user) {\r\n          throw new Error('No user found with this email');\r\n        }\r\n\r\n        const isValid = await user.comparePassword(credentials.password);\r\n\r\n        if (!isValid) {\r\n          throw new Error('Invalid password');\r\n        }\r\n\r\n        return {\r\n          id: user._id.toString(),\r\n          email: user.email,\r\n          name: user.name,\r\n          role: user.role,\r\n        };\r\n      }\r\n    })\r\n  ],\r\n  session: {\r\n    strategy: 'jwt',\r\n  },\r\n  pages: {\r\n    signIn: '/signin',\r\n  },\r\n  callbacks: {\r\n    async jwt({ token, user }) {\r\n      if (user) {\r\n        token.role = user.role;\r\n      }\r\n      return token;\r\n    },\r\n    async session({ session, token }) {\r\n      if (session?.user) {\r\n        session.user.role = token.role;\r\n      }\r\n      return session;\r\n    }\r\n  }\r\n};\r\n\r\nconst handler = NextAuth(authOptions);\r\nexport { handler as GET, handler as POST }; "],"names":[],"mappings":";;;;;;;;;;;;;;AAMO,MAAM,cAA+B;IAC1C,WAAW;QACT,oKAAoB;YAClB,MAAM;YACN,aAAa;gBACX,OAAO;oBAAE,OAAO;oBAAS,MAAM;gBAAQ;gBACvC,UAAU;oBAAE,OAAO;oBAAY,MAAM;gBAAW;YAClD;YACA,MAAM,WAAU,WAAW;gBACzB,IAAI,CAAC,aAAa,SAAS,CAAC,aAAa,UAAU;oBACjD,MAAM,IAAI,MAAM;gBAClB;gBAEA,MAAM;gBACN,MAAM,OAAO,MAAM,iIAAK,OAAO,CAAC;oBAAE,OAAO,YAAY,KAAK;gBAAC;gBAE3D,IAAI,CAAC,MAAM;oBACT,MAAM,IAAI,MAAM;gBAClB;gBAEA,MAAM,UAAU,MAAM,KAAK,eAAe,CAAC,YAAY,QAAQ;gBAE/D,IAAI,CAAC,SAAS;oBACZ,MAAM,IAAI,MAAM;gBAClB;gBAEA,OAAO;oBACL,IAAI,KAAK,GAAG,CAAC,QAAQ;oBACrB,OAAO,KAAK,KAAK;oBACjB,MAAM,KAAK,IAAI;oBACf,MAAM,KAAK,IAAI;gBACjB;YACF;QACF;KACD;IACD,SAAS;QACP,UAAU;IACZ;IACA,OAAO;QACL,QAAQ;IACV;IACA,WAAW;QACT,MAAM,KAAI,EAAE,KAAK,EAAE,IAAI,EAAE;YACvB,IAAI,MAAM;gBACR,MAAM,IAAI,GAAG,KAAK,IAAI;YACxB;YACA,OAAO;QACT;QACA,MAAM,SAAQ,EAAE,OAAO,EAAE,KAAK,EAAE;YAC9B,IAAI,SAAS,MAAM;gBACjB,QAAQ,IAAI,CAAC,IAAI,GAAG,MAAM,IAAI;YAChC;YACA,OAAO;QACT;IACF;AACF;AAEA,MAAM,UAAU,iJAAS"}},
    {"offset": {"line": 196, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 200, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/.next-internal/server/app/api/auth/[...nextauth]/route/actions.js"],"sourcesContent":["__turbopack_export_value__({\n});"],"names":[],"mappings":"AAAA,2BAA2B,CAC3B"}},
    {"offset": {"line": 201, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}